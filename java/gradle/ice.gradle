// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

buildscript {
    ext.getIceHome = {
        // Determine the name of the Slice-to-Java translator
        def isWindows = false
        def slice2java = "slice2java"
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            isWindows = true
            slice2java = "slice2java.exe"
        }

        def env = System.getenv()
	def iceDir
	ext.srcdist = false
	ext.useLocalRepo = false

        // First check if iceHome was set in gradle.properties
        // Otherwise check if ICE_HOME is set and it points at a valid installation
        if (iceHome) {
            def translator = new File("$iceHome/bin/$slice2java")
            if (!translator.exists()) {
                throw new GradleException("Unable to find $slice2java in $iceHome, please verify iceHome is " +
                                          "properly configured in gradle.properties and Ice is correctly installed.")
            }
	    iceDir = iceHome
        } else {
            iceDir = env['ICE_HOME']
            if (iceDir) {
	        def translator = new File("$iceDir/bin/$slice2java")
                if (!translator.exists()) {
 	    	    translator = new File("$iceDir/cpp/bin/$slice2java")
                    if (!translator.exists()) {
                        throw new GradleException("Unable to find $slice2java in $iceDir, please verify ICE_HOME is " +
                                                  "properly configured and Ice is correctly installed.")
		    }
		    ext.srcdist = true
                }
            }
        }

        if (iceDir == null) {
            def f1 = new File("/usr/bin/$slice2java")
            if (f1.exists()) {
                iceDir = "/usr"
            }
        }

        if (iceDir == null && isWindows) {
            def progFiles
            def arch1 = env['PROCESSOR_ARCHITECTURE']
            def arch2 = env['PROCESSOR_ARCHITEW6432']
            if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64") {
                progFiles = System.getenv('ProgramFiles(x86)')
            } else {
                progFiles = System.getenv('ProgramFiles')
            }
            iceDir = "$progFiles\\ZeroC\\Ice-${project.version}"
        }

        if (iceDir == null) {
            def f1 = new File("/usr/local/bin/$slice2java")
            if (f1.exists()) {
                iceDir = "/usr/local"
            }
        }

        if (iceDir == null) {
            throw new GradleException("Unable to find a valid Ice distribution, please verify ICE_HOME is properly " +
                                      "configured and Ice is correctly installed.")
        }

        // Set the slice and java jar directory
        if (iceDir == "/usr") {
 	    ext.sliceDir = "/usr/share/Ice-${project.version}/slice"
            ext.distJarDir = "/usr/share/java"
        } else if (iceDir == "/usr/local") {
 	    ext.sliceDir = "/usr/local/share/slice"
            ext.distJarDir = "/usr/local/share/java"
        } else {
	    ext.sliceDir = "$iceDir/slice"
	    if (srcdist) {
            	ext.distJarDir = "$iceDir/java/lib"
	    } else {
            	ext.distJarDir = "$iceDir/lib"
	    }
        }

        return iceDir
    }
    def iceDir = getIceHome()

    repositories {
        if (gradle.startParameter.isOffline() || srcdist) {
            flatDir {
                name "local"
                dirs distJarDir
            }
        }
	if (!gradle.startParameter.isOffline()) {
            maven {
                url 'https://repo.zeroc.com/nexus/content/repositories/releases'
            }
        }
    }
    dependencies {
        classpath group: 'com.zeroc.gradle.plugins', name: 'ice-gradle-plugin', version: "1.0"
    }
}

if (!project.plugins.findPlugin(com.zeroc.gradle.plugins.slice.SlicePlugin)) {
    project.apply(plugin: com.zeroc.gradle.plugins.slice.SlicePlugin)
}

ext.generatedDir = "$project.buildDir/generated"
ext.useLocalOnly = gradle.startParameter.isOffline()

def android = false
try {
    compileJava {
        options.debug = debug
    }
} catch(MissingMethodException ex) {
    // For Android builds: thrown if compileJava isn't available.
    android = true
}

def env = System.getenv()

// Determine the name of the Slice-to-Java translator
def isWindows = false
def programFiles
if (System.properties['os.name'].toLowerCase().contains('windows')) {
    isWindows = true

    def arch1 = env['PROCESSOR_ARCHITECTURE']
    def arch2 = env['PROCESSOR_ARCHITEW6432']
    if (arch1 == "AMD64" || arch1 == "IA64" || arch2 == "AMD64" || arch2 == "IA64") {
        programFiles = System.getenv('ProgramFiles(x86)')
    } else {
        programFiles = System.getenv('ProgramFiles')
    }
}

def iceDir = getIceHome()

if (srcdist) {
    slice.iceHome = "$iceDir/cpp"
    slice.srcDist = true
} else {
    slice.iceHome = iceDir
    slice.srcDist = false
}

// Check if we need to append version suffix to jar files
ext.versionSuffix = ""
def iceJar = new File("${distJarDir}/Ice-${project.version}.jar")
if(iceJar.exists()) {
    ext.versionSuffix = "-${project.version}"
}

ext.searchFile = { List<Closure> places, List<String> searchPaths ->
    def dirs = []
    places.each {
        def dir = it()
        if(dir != null) {
            dirs << dir + "/"
        }
    }

    def candidates = searchPaths.collect {
        def path = it
        dirs.collect {
            it.concat(path)
        }
    }.flatten()

    return candidates.find {
        new File(it).exists()
    }
}

def demoJar(name) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        attributes("Main-Class": name.capitalize())
        attributes("Class-Path": configurations.runtime.resolve().collect { it.toURI() }.join(' '))
    }


    artifacts {
        archives jarTask
    }
}
ext {
    demoJar = this.&demoJar
}

def localDependency(artifactId) {
    return "com.zeroc:${artifactId}:${project.version}"
}
ext {
    localDependency = this.&localDependency
}
